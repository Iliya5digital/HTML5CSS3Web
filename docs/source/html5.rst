Основные принципы создания Web-страниц. Язык HTML 5
=====
Web-страницы выглядят зачастую очень пестро: разнокалиберные куски текста, 
таблицы, картинки, врезки, сноски и даже фильмы. Но описывается все это в виде 
обычного текста. Да-да, Web-страницы — суть текстовые файлы, которые можно 
создать с помощью хорошо знакомого нам редактора Блокнот, поставляемого в со-
ставе Windows! (Разумеется, подойдет любой аналогичный текстовый редактор.)
Для форматирования содержимого Web-страниц применяется особый язык —
HTML (HyperText Markup Language, язык гипертекстовой разметки). С помощьюкоманд — тегов — этого языка создают и абзацы текста, и заголовки, и врезки, и 
даже таблицы.
Первая версия языка HTML появилась очень давно, еще в 1992 году. С тех пор по 
Сети утекло немало гигабайт... HTML также не стоял на месте. В данный момент 
готовится к выходу окончательная спецификация новой версии HTML под номе-
ром 5, и многие Web-обозреватели уже поддерживают некоторые ее возможности. 
Ее-то мы и будем изучать.

Язык HTML и его теги
------------
Изучать HTML лучше всего на примере. Так что давайте сразу же создадим нашу 
первую Web-страничку. Благо Windows уже содержит необходимый для этого ин-
струмент — Блокнот.

.. note::

   Вообще, для создания Web-страниц существует множество специальных программ —
Web-редакторов. Они позволяют работать с Web-страницами, даже не зная HTML, —
как с документами Microsoft Word, просто набирая текст и форматируя его. Также они 
следят за правильностью расстановки тегов, помогут быстро создать сложный эле-
мент Web-страницы и даже опубликовать готовый Web-сайт в Сети. К таким програм-
мам принадлежит, в частности, известный Web-редактор Adobe Dreamweaver.
Однако мы пока что будем пользоваться простейшим текстовым редактором Блокнот. 
Это позволит нам лучше познакомиться с HTML.

Откроем Блокнот и наберем в нем текст (или, как говорят бывалые программисты, 
код), приведенный в листинге 1.1.

.. code-block:: console

   <!DOCTYPE html>
   <HTML>
   <HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
   <TITLE>Пример Web-страницы</TITLE>
   </HEAD>
   <BODY>
   <H1>Справочник по HTML</H1>
   <P>Приветствуем на нашем Web-сайте всех, кто занимается Web-дизайном!
   Здесь вы сможете найти информацию обо всех интернет-технологиях,
   применяемых при создании Web-страниц. В частности, о языке
   <STRONG>HTML</STRONG>.</P>
   </BODY>
   </HTML>

Проверим набранный код на ошибки и сохраним в файл с именем 1.1.htm. Только 
сделаем при этом две важные вещи.
1. Сохраним HTML-код в кодировке UTF-8. Для этого в диалоговом окне сохране-
ния файла Блокнота найдем раскрывающийся список Кодировка и выберем 
в нем пункт UTF-8.
Заключим имя файла в кавычки. Иначе Блокнот добавит к нему расширение txt, 
и наш файл получит имя 1.1.htm.txt.
Все, наша первая Web-страница готова! Теперь осталось открыть ее в Web-
обозревателе и посмотреть на результат.
Мы можем использовать стандартно поставляемый в составе Windows Web-
обозреватель Microsoft Internet Explorer. Но Internet Explorer на данный момент не 
поддерживает HTML 5; его поддержку обещают только в версии 9, которая пока 
находится в разработке. HTML 5 поддерживают последние версии Mozilla Firefox, 
Opera, Apple Safari и Google Chrome, поэтому предпочтительнее какая-либо из этих 
программ.
Откроем же Web-страницу в выбранном Web-обозревателе (автор выбрал Firefox) и 
посмотрим на нее (рис. 1.3).
Видите? Мы создали Web-страницу, содержащую большой "кричащий" заголовок, 
абзац текста, который автоматически разбивается на строки и содержит фрагмент 
текста, выделенный полужирным шрифтом (аббревиатура "HTML"). И все это —
в "голом" тексте, набранном в Блокноте!
Теперь посмотрим, что же мы такое написали в файле 1.1.htm. Пока что ограни-
чимся небольшим фрагментом HTML-кода (листинг 1.2).


.. code-block:: console

   <H1>Справочник по HTML</H1>
   <P>Приветствуем на нашем Web-сайте всех, кто занимается Web-дизайном!
   Здесь вы сможете найти информацию обо всех интернет-технологиях,
   применяемых при создании Web-страниц. В частности, о языке
   <STRONG>HTML</STRONG>.</P>

Здесь мы видим текст заголовка и абзаца. И еще странные слова, взятые в угловые 
скобки — символы < и >. Что это такое?
Это и есть теги HTML, о которых упоминалось ранее. Они превращают тот или 
иной фрагмент HTML-кода в определенный элемент Web-страницы: абзац, заголо-
вок или текст, выделенный полужирным шрифтом.
Начнем с тегов <H1> и </H1>, поскольку они идут первыми. Эти теги превращают 
фрагмент текста, находящийся между ними, в заголовок. Тег <H1> помечает начало 
фрагмента, на который распространяется действие тега, и называется открываю-
щим. А тег </H1> устанавливает конец "охватываемого" фрагмента и называется 
закрывающим. Что касается самого фрагмента, заключенного между открывающим 
и закрывающим тегами, то он называется содержимым тега. Именно к содержи-
мому применяется действие тега.
Все теги HTML представляют собой символы < и >, внутри которых находится имя 
тега, определяющее назначение тега. Закрывающий тег должен иметь то же имя, 
что и открывающий; единственное отличие закрывающего тега — символ /, кото-
рый ставится между символом < и именем тега.
Рассмотренные нами теги <H1> и </H1> в HTML фактически считаются одним тегом 
<H1>. Такой тег называется парным.
Поехали дальше. Парный тег <P> создает на Web-странице абзац; содержимое тега 
станет текстом этого абзаца. Такой абзац будет отображаться с отступами сверху и 
снизу. Если он полностью помещается по ширине в окне Web-обозревателя, то ото-
бразится в одну строку; в противном случае сам Web-обозреватель разобьет его на 
несколько более коротких строк. (То же справедливо и для заголовка.)
Парный тег <STRONG> выводит свое содержимое полужирным шрифтом. Как мы ви-
дим, тег <STRONG> вложен внутрь содержимого тега <P>. Это значит, что содержи-
мое тега <STRONG> будет отображаться как часть абзаца (тега <P>).
Давайте ради интереса выделим слова "Web-дизайном" курсивом. Для этого помес-
тим соответствующий фрагмент текста абзаца в парный тег <EM>:
<P>Приветствуем на нашем Web-сайте всех, кто занимается
<EM>Web-дизайном</EM>! Здесь вы сможете найти информацию обо всех
. . .
Сохраним исправленную Web-страницу и обновим содержимое окна Web-обо-
зревателя, нажав клавишу <F5>. Получилось! Да мы уже стали Web-дизайнерами!
Осталось рассмотреть важнейшие правила, согласно которым пишется HTML-код.
Имена тегов можно писать как прописными (большими), так и строчными (ма-
лыми) буквами. Традиционно в языке HTML имена тегов пишут прописными 
буквами.
Между символами <, >, / и именами тегов, а также внутри имен тегов не допус-
каются пробелы и переносы строк.
В обычном тексте, не являющемся тегом, не должны присутствовать символы <
и >. (Эти символы называют недопустимыми.) В противном случае Web-
обозреватель сочтет фрагмент текста, где встречается один из этих символов, те-
гом и отобразит Web-страницу некорректно.
На этом пока закончим. Впоследствии, изучив другие языковые элементы HTML, 
мы пополним список этих правил.

Вложенность тегов
------------
Если мы снова посмотрим на приведенный в листинге 1.2 фрагмент HTML-кода, то 
заметим, что одни теги вложены в другие. Так, тег <STRONG> вложен в тег <P>, явля-
ясь частью его содержимого. Тег <P>, в свою очередь, вложен в тег <BODY>, а тот —
в "глобальный" тег <HTML>. (Теги <BODY> и <HTML> мы рассмотрим чуть позже.) Такая 
вложенность тегов в HTML — обычное явление.
Когда Web-обозреватель встречает тег, вложенный в другой тег, он как бы накла-
дывает действие "внутреннего" тега на эффект "внешнего". Так, действие тега 
<STRONG> будет наложено на действие тега <P>, и фрагмент абзаца окажется выде-
ленным полужирным шрифтом, при этом оставаясь частью этого абзаца.
Давайте для примера текст "Web-дизайн", который мы недавно поместили в тег 
<EM>, заключим еще и в тег <STRONG>. Вот так:

.. code-block:: console

   <P>Приветствуем на нашем Web-сайте всех, кто занимается
   <EM><STRONG>Web-дизайном</STRONG></EM>! Здесь вы сможете найти
   . . 

В этом случае данный текст будет выделен полужирным курсивом. Иными слова-
ми, действие тега <STRONG> будет наложено на действие тега <EM>.
Теперь — внимание! Порядок следования закрывающих тегов должен быть обрат-
ным тому, в котором следуют теги открывающие. Говоря иначе, теги со всем их 
содержимым должны полностью вкладываться в другие теги, не оставляя "хвостов" 
снаружи.
Если же мы нарушим это правило и напишем такой HTML-код (обратите внимание 
на специально перепутанный порядок следования открывающих тегов):

.. code-block:: console

   <P>Приветствуем на нашем Web-сайте всех, кто занимается
   <EM><STRONG>Web-дизайном</EM></STRONG>! Здесь вы сможете найти
   . . .

Web-обозреватель может отобразить нашу Web-страницу неправильно.

.. note::
   Нужно сказать, что современные Web-обозреватели "умеют" исправлять мелкие 
ошибки Web-дизайнера. Но именно мелкие!

Осталось выучить несколько новых терминов. Тег, в который непосредственно 
вложен данный тег, называется родительским, или родителем. В свою очередь, тег, 
вложенный в данный тег, называется дочерним, или потомком. Так, для тега <EM>
в приведенном далее примере тег <P> — родительский, а тег <STRONG> — дочерний. 
Любой тег может иметь сколько угодно дочерних тегов, но только один родитель-
ский (что, впрочем, понятно — не может же он быть непосредственно вложен од-
новременно в два тега).
Элемент Web-страницы, в который вложен элемент, создаваемый данным тегом, 
называется родительским, или родителем. А элемент Web-страницы, который вложен в данный элемент, — дочерним, или потомком. То же самое, что и в случае 
тегов.
Уровень вложенности того или иного тега показывает количество тегов, в которые 
он последовательно вложен. Если принять за точку отсчета тег <P>, то тег <EM> бу-
дет иметь первый уровень вложенности, т. к. он вложен непосредственно в тег <P>. 
Тег <STRONG> же будет иметь второй уровень вложенности, поскольку он вложен в 
тег <EM>, а тот, в свою очередь, — в тег <P>. В сложных же Web-страницах уровень 
вложенности иных тегов может составлять несколько десятков.
Уровень вложенности тегов в HTML-коде обозначают с помощью отступов, кото-
рые ставят слева от соответствующего тега и создают с помощью пробелов (лис-
тинг 1.3). На отображение Web-страницы они никак не влияют.

.. code-block:: console

   <BODY>
   <H1>Справочник по HTML</H1>
   <P>Приветствуем на нашем Web-сайте всех, кто занимается Web-дизайном!
   Здесь вы сможете найти информацию обо всех интернет-технологиях,
   применяемых при создании Web-страниц. В частности, о языке
   <STRONG>HTML</STRONG>.</P>
   </BODY>

Здесь сразу видно, что теги <H1> и <P> вложены в тег <BODY>, — видно по отступам.

Секции Web-страницы
------------
Снова вернемся в полному HTML-коду нашей Web-странички. Мысленно удалим 
из него уже рассмотренный фрагмент и получим листинг 1.4.

.. code-block:: console

   <!DOCTYPE html>
   <HTML>
   <HEAD>
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
   <TITLE>Пример Web-страницы</TITLE>
   </HEAD>
   <BODY>
   . . .
   </BODY>
   </HTML>

Здесь применены несколько тегов, которые нам не знакомы. Это так называемые 
невидимые теги — теги, содержимое которых никак не отображается Web-
обозревателем. Они занимаются тем, что хранят сведения о параметрах самой Web-
страницы и делят ее на две секции, имеющие принципиально разное назначение.
Секция тела Web-страницы находится внутри парного тега <BODY>. Она описывает 
само содержимое Web-страницы, то, что будет выведено на экран. Именно секцию 
тела мы рассматривали в предыдущих разделах.
А в парном теге <HEAD> находится секция заголовка Web-страницы. (Не путать с за-
головком, который создается с помощью тега <H1>!) В эту секцию помещают све-
дения о параметрах Web-страницы, не отображаемые на экране и предназначенные 
исключительно для Web-обозревателя.
И заголовок, и тело Web-страницы находятся внутри парного тега <HTML>, который 
расположен на самом высшем (нулевом) уровне вложенности и не имеет родителя.
Любая Web-страница должна быть правильно отформатирована: иметь секции за-
головка и тела и все соответствующие им теги. Только в таком случае она будет 
считаться корректной с точки зрения стандартов HTML.

Метаданные и тип Web-страницы
------------
Вернемся к сведениям о параметрах Web-страницы, которые находятся в секции ее 
заголовка. Что это за параметры? И что они задают?
Сначала введем еще пару терминов. Параметры Web-страницы, не отображаемые 
на экране и предназначенные для Web-обозревателя, назовем метаданными. Это 
своего рода данные, описывающие другие данные, в нашем случае — Web-
страницу. А HTML-теги, которые задают метаданные, называются метатегами.
Прежде всего, в метаданные входит название Web-страницы. Оно отображается 
в заголовке окна Web-обозревателя, где выводится содержимое данной Web-
страницы, и хранится в "истории" (списке посещенных к настоящему времени Web-
страниц). Название помещается в парный тег <TITLE> и располагается в секции за-
головка Web-страницы:

  <HEAD>
  . . .
  <TITLE>Пример Web-страницы</TITLE>
  </HEAD>

Далее, обычно в секции заголовка расположен особый метатег, задающий кодиров-
ку, в которой сохранена Web-страница. Этот метатег имеет "говорящее" имя 
<META>:

  <HEAD>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">
  . . .
  </HEAD>

Приведенный тег задает кодировку UTF-8, в которой мы сохранили нашу Web-
страничку. Существуют аналогичные теги, задающие кодировки 1251, КОИ-8, ко-
дировка западноевропейских и восточноазиатских языков и др.

НА ЗАМЕТКУ
Кодировка UTF-8 — это разновидность кодировки Unicode, предназначенная для Web-
дизайна. Кодировка Unicode (а значит, и UTF-8) может закодировать все символы всехязыков, имеющихся на Земле. Именно она в настоящее время чаще всего применяет-
ся для создания Web-страниц.

Кстати, вы не заметили ничего странного в теге <META>? У него нет ни содержимо-
го, ни закрывающей пары! Это так называемый одинарный тег, который имеет 
только открывающую пару. Такой тег действует в той точке HTML-кода, где он сам 
находится, и либо задает метаданные, либо помещает в соответствующее место 
Web-страницы какой-либо элемент, не относящийся к тексту. Впоследствии нам 
будут часто встречаться одинарные теги.
Теперь осталось рассмотреть последний тег, находящийся в самом начале HTML-
кода нашей Web-страницы. Этот тег находится даже вне "всеобъемлющего" тега 
<HTML>. Важная, должно быть, персона... Вот он:
<!DOCTYPE html>
Метатег <!DOCTYPE> задает, во-первых, версию языка HTML, на которой написана 
Web-страница, а во-вторых, разновидность данной версии. Так, существуют мета-
теги <!DOCTYPE>, указывающие на HTML 5, "строгую" и "переходную" разновидно-
сти HTML 4.01 (это предыдущая версия языка HTML, еще действующая на данный 
момент) и язык XHTML (ответвление HTML, имеющее несколько другой синтак-
сис).
Так вот, метатег <!DOCTYPE html>, который мы поставили в начало нашей Web-
странички, указывает на HTML 5. Будем работать только с самыми новыми техно-
логиями! Долой всякое старье!

Атрибуты HTML-тегов
------------
Последний важный вопрос, который мы здесь рассмотрим, — атрибуты HTML-
тегов. После этого мы пока что закончим с HTML и обратимся к принципам совре-
менного Web-дизайна.
Посмотрим на тег <META>, задающий кодировку Web-страницы:

  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=utf-8">

Здесь мы видим, что между символами < и >, помимо имени тега, присутствуют 
еще какие-то данные. Это атрибуты тега, задающие его параметры. В частности, 
два атрибута данного тега <META> указывают, что документ представляет собой 
Web-страницу, и задают ее кодировку.
Каждый атрибут тега имеет имя, за которым ставится знак равенства, и значение
данного атрибута, взятое в двойные кавычки. Так, атрибут с именем HTTP-EQUIV
имеет значение "Content-Type", говорящее о том, что данный метатег задает тип 
документа. А атрибут с именем CONTENT имеет значение "text/html; charset=utf-8", 
обозначающее, что данный документ представляет собой Web-страницу, и указы-
вающее, что она набрана в кодировке UTF-8.
Атрибуты тегов бывают обязательными и необязательными. Обязательные атрибу-
ты должны присутствовать в теге в обязательном порядке. Необязательные же атрибуты могут быть опущены; в таком случае тег ведет себя так, будто соответст-
вующему атрибуту присвоено значение по умолчанию.
Атрибуты HTTP-EQUIV и CONTENT тега <META> обязательные — кому нужен метатег без 
метаданных... А вот атрибут ID, поддерживаемый практически всеми тегами 
HTML, необязательный, он используется только в особых случаях:

  <H1 ID="header1">Справочник по HTML</H1>

В частях II и III, работая со стилями CSS и Web-сценариями, мы будем активно 
пользоваться атрибутом тега ID. А пока что оставим его в покое.
Ранее мы изучили три правила написания HTML-кода. Добавим к ним еще шесть.
Имена атрибутов тегов могут быть написаны как прописными (большими), так и 
строчными (малыми) буквами. Традиционно в языке HTML имена атрибутов те-
гов пишут прописными буквами, а их значения — строчными, если, конечно, 
значение не чувствительно к регистру букв.
Имена атрибутов тегов пишут между символами < и > после имени тега и отде-
ляют от него пробелом или разрывом строки. Если в теге присутствуют не-
сколько атрибутов, их отделяют друг от друга также пробелами или разрывами 
строки.
Внутри имен атрибутов не должны присутствовать пробелы, в противном случае 
Web-обозреватель посчитает, что это не один атрибут, а несколько.
Значение атрибута тега пишут после его имени и заключают в двойные кавычки. 
Между именем атрибута тега и его значением ставят знак равенства.
Между именем атрибута тега, знаком равенства и открывающими кавычками 
могут присутствовать пробелы или разрывы строк.
Символы двойных кавычек недопустимы и не должны присутствовать в обыч-
ном тексте, иначе Web-обозреватель посчитает следующий за ними текст значе-
нием атрибута тега.
На этом пока закончим с HTML. В последующих главах части I мы продолжим его 
изучение.
